"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

$.mlpFnName = function (fn) {
  return fn.name || (fn + '').split(/\s|\(/)[1];
};

$.mlpInit = function (fn, name, set) {
  if (typeof set == "undefined") {
    set = true;
  }
  window.MLP = window.MLP || {};
  window.MLP.apps = window.MLP.apps || {};
  window.MLP.instances = window.MLP.instances || {};
  if (fn && set) {
    name = name || $.mlpFnName(fn);
    window.MLP.apps[name] = fn;
  } else {
    return window.MLP.apps[fn];
  }
};

/***
@fn (obj) - the JS object class
@name (str) - the name of the class
@bypass (bool) - whether or not the plugin can be instantiated multiple times
@elPlugin (bool) - whether to create an element based plugin $(...).pluginName 
or regular JQuery method $.methodName
@returnContext (bool) - whether to return an object with class context 
and the element which instantiated the plugin (@elPlugin must be true)
**/

$.mlpPlugin = function (fn, name, bypass, elPlugin, returnContext) {
  var obj;
  if (typeof bypass == "undefined") {
    bypass = false;
  }
  if (typeof elPlugin == "undefined") {
    elPlugin = true;
  }
  if (typeof returnContext == "undefined") {
    returnContext = true;
  }
  obj = {};
  $.mlpInit(fn, name);
  name = name || $.mlpFnName(fn);
  obj[name] = function () {
    var args,
        option,
        _el,
        _this = [],
        result;
    option = arguments[0];
    args = 2 <= arguments.length ? Array.prototype.slice.call(arguments, 1) : [];
    _el = $(this).each(function () {
      var $this, data, key;
      $this = $(this);
      key = 'mlp-' + name;
      data = $this.data(key);
      if (!data || bypass) {
        $this.data('name', name);
        $this.data(key, data = new fn(option, this));
      }
      if (typeof option === 'string') {
        return data[option].apply(data, args);
      }
      _this.push(data);
    });
    result = returnContext ? { mlp: _this, el: _el } : null;
    return result;
  };
  $.fn.extend(obj);
  if (!elPlugin) {
    obj[name] = function (option) {
      return new fn(option);
    };
    $.extend(obj);
  }
};

var MLPModule = function () {
  _createClass(MLPModule, [{
    key: "defaults",
    value: function defaults() {
      this.defaults = {};
    }
  }]);

  function MLPModule(options, element) {
    _classCallCheck(this, MLPModule);

    this.ops = $.extend({}, this.defaults, options);
    this.sel = this.sel || {};
    this.el = this.el || {};
    this.el.target = $(element);
    this.init();
    return this;
  }

  _createClass(MLPModule, [{
    key: "init",
    value: function init() {
      this.classes = {
        active: 'is-active',
        offscreen: 'l-offscreen'
      };

      this.keys = {
        esc: 27,
        down: 40,
        up: 38,
        left: 37,
        right: 39,
        o: 79,
        space: 32,
        tab: 9,
        enter: 13
      };

      this.aria = {
        expanded: 'aria-expanded',
        hidden: 'aria-hidden',
        controls: 'aria-controls',
        selected: 'aria-selected',
        invalid: 'aria-invalid',
        pressed: 'aria-pressed',
        described: 'aria-describedby',
        checked: 'aria-checked',
        label: 'aria-label',
        labelled: 'aria-labelledby',
        popup: 'aria-haspopup'
      };

      this.attr = {
        tabindex: 'tabindex'
      };
    }
  }, {
    key: "stop",
    value: function stop(e) {
      e.preventDefault();
      return e.stopPropagation();
    }
  }, {
    key: "target",
    value: function target(e) {
      return $(e.target);
    }
  }, {
    key: "currentTarget",
    value: function currentTarget(e) {
      return $(e.currentTarget);
    }
  }, {
    key: "isEnter",
    value: function isEnter(e) {
      return this.keycode(e) === this.keys.enter;
    }
  }, {
    key: "isSpace",
    value: function isSpace(e) {
      return this.keycode(e) === this.keys.space;
    }
  }, {
    key: "isTab",
    value: function isTab(e) {
      return this.keycode(e) === this.keys.tab;
    }
  }, {
    key: "isBackTab",
    value: function isBackTab(e) {
      return e.shiftKey && this.isTab(e);
    }
  }, {
    key: "isEsc",
    value: function isEsc(e) {
      return this.keycode(e) === this.keys.esc;
    }
  }, {
    key: "isEnterOrSpace",
    value: function isEnterOrSpace(e) {
      return this.isEnter(e) || this.isSpace(e);
    }
  }, {
    key: "keycode",
    value: function keycode(e) {
      return e.which;
    }
  }, {
    key: "isIE",
    value: function isIE(version) {
      if (typeof version == "undefined") {
        version = 8;
      }
      return bowser.msie && bowser.version === version;
    }
  }]);

  return MLPModule;
}();

$.mlpInit(MLPModule, 'MLPModule');
'use strict';

/*
  Every plugin initialization goes here.
 */
$(document).ready(function () {

  // console.log('%c Welcome to FELab, a MullenLowe Profero product. ', 'background: #c3a90a;\ncolor: #ffffff;\nfont-size: 18px;\nfont-family: "Helvetica Neue";\nfont-weight: 300;\nline-height: 30px;\nheight: 30px;\npadding: 5px');

  $('[data-js-top-nav]').TopNav();
  $('[data-js-switch-tab]').SwitchTab();
  $('[data-js-skewing]').Skewing();
  $('[data-js-masonry]').MasonryGallery();

  setTimeout(function () {
    $('[data-js-fullpage]').FullPage();
  }, 0);
});
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
# extends jquery.fullpage.js, scrolloverflow.js
#

*/

var FullPage = function (_MLP$apps$MLPModule) {
  _inherits(FullPage, _MLP$apps$MLPModule);

  function FullPage() {
    _classCallCheck(this, FullPage);

    return _possibleConstructorReturn(this, (FullPage.__proto__ || Object.getPrototypeOf(FullPage)).apply(this, arguments));
  }

  _createClass(FullPage, [{
    key: 'init',
    value: function init() {
      _get(FullPage.prototype.__proto__ || Object.getPrototypeOf(FullPage.prototype), 'init', this).call(this);
      this.el = {
        fullpageContainer: this.el.target,
        navItems: $('[data-js-top-nav]').find('a')
      };

      this.event();
    }
  }, {
    key: 'event',
    value: function event() {
      var _this = this,
          _panel = $('.c-homepage__tab-panel');
      this.el.fullpageContainer.fullpage({
        'navigation': true,
        'scrollOverflow': true,
        afterLoad: function afterLoad(anchor, index) {
          var _index = index - 1;
          var navLong = $(_this.el.navItems).length;
          $(_this.el.navItems).removeClass('active');

          // 前两个section 分别对应前两个导航active
          if (_index < 2) {
            $(_this.el.navItems[_index]).addClass('active');
            //添加第二屏菜单淡入效果
            if (_index == 1) {
              _panel.addClass('in');
            } else {
              _panel.removeClass('in');
            }
          }
          // 最后一个section 导航倒数第二个加active
          else if (_index == navLong) {
              _index -= 2;
              $(_this.el.navItems[_index]).addClass('active');
            } else {
              _index -= 1;
              $(_this.el.navItems[_index]).addClass('active');
              _panel.removeClass('in');
            }
        }
      });

      // next button
      $('.js-fullpage-next-button').on('click', function () {
        $.fn.fullpage.moveSectionDown();
      });

      // 点击nav页面滚动到特定section
      this.el.navItems.each(function (index) {
        var _index = index + 1;
        var navLong = $(_this.el.navItems).length;
        //前两个section
        if (_index <= 2) {
          $(this).on('click', function () {
            $.fn.fullpage.moveTo(_index);
          });
        }

        // 导航最后一个链接
        else if (_index == navLong) {
            return;
          } else {
            _index += 1;
            $(this).on('click', function () {
              $.fn.fullpage.moveTo(_index);
            });
          }
      });
    }
  }]);

  return FullPage;
}(MLP.apps.MLPModule);

$.mlpPlugin(FullPage, 'FullPage', false);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
# extends masonry.pkgb.js
#

*/

var MasonryGallery = function (_MLP$apps$MLPModule) {
  _inherits(MasonryGallery, _MLP$apps$MLPModule);

  function MasonryGallery() {
    _classCallCheck(this, MasonryGallery);

    return _possibleConstructorReturn(this, (MasonryGallery.__proto__ || Object.getPrototypeOf(MasonryGallery)).apply(this, arguments));
  }

  _createClass(MasonryGallery, [{
    key: 'init',
    value: function init() {
      _get(MasonryGallery.prototype.__proto__ || Object.getPrototypeOf(MasonryGallery.prototype), 'init', this).call(this);

      this.event();
    }
  }, {
    key: 'event',
    value: function event() {
      var _this = this;
      _this.el.target.masonry({
        columnWidth: 0,
        itemSelector: '.c-masonry-gallery__item'
      });
    }
  }]);

  return MasonryGallery;
}(MLP.apps.MLPModule);

$.mlpPlugin(MasonryGallery, 'MasonryGallery', false);
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Skewing = function (_MLP$apps$MLPModule) {
  _inherits(Skewing, _MLP$apps$MLPModule);

  function Skewing() {
    _classCallCheck(this, Skewing);

    return _possibleConstructorReturn(this, (Skewing.__proto__ || Object.getPrototypeOf(Skewing)).apply(this, arguments));
  }

  _createClass(Skewing, [{
    key: "init",
    value: function init() {
      _get(Skewing.prototype.__proto__ || Object.getPrototypeOf(Skewing.prototype), "init", this).call(this);
      this.el = {
        _hills: this.el.target.find('.hill'),
        "scale": 0.3,
        "x": 0,
        "y": 0,
        "direction": 0.2,
        "windowX": 0,
        "winWidth": 0
      };
      this.el.winWidth = $(document).width();
      this.el.windowX = this.el.winWidth / 2;
      this.event();
    }
  }, {
    key: "event",
    value: function event() {
      var _this = this;
      $(document).on('mousemove', function (evt) {
        $(_this.el._hills).each(function (index, item) {
          _this.el.x = -(evt.pageX - _this.el.windowX) * _this.el.scale * _this.el.direction * (index - 1.8);
          $(item).css({ "transform": "translateX(" + _this.el.x + "px)" });
        });
      });
    }
  }]);

  return Skewing;
}(MLP.apps.MLPModule);

$.mlpPlugin(Skewing, 'Skewing', false);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SwitchTab = function (_MLP$apps$MLPModule) {
  _inherits(SwitchTab, _MLP$apps$MLPModule);

  function SwitchTab() {
    _classCallCheck(this, SwitchTab);

    return _possibleConstructorReturn(this, (SwitchTab.__proto__ || Object.getPrototypeOf(SwitchTab)).apply(this, arguments));
  }

  _createClass(SwitchTab, [{
    key: 'init',
    value: function init() {
      _get(SwitchTab.prototype.__proto__ || Object.getPrototypeOf(SwitchTab.prototype), 'init', this).call(this);
      this.el = {
        _tabs: this.el.target.find('li')
      };
      this.event();
    }
  }, {
    key: 'event',
    value: function event() {
      var _this = this,
          _currnetIndex;
      $(_this.el._tabs).on('mouseover', function () {
        _currnetIndex = $(this).index() + 1;
        $(_this.el._tabs).each(function (index, item) {
          var _index = index + 1;
          $(item).find(".c-homepage__tab-panel__button").removeClass("active");
          $(".c-homepage__tab-" + _index).addClass("outPanel");
          $(".c-homepage__tab-" + _index).removeClass("inPanel");
        });
        $(this).find(".c-homepage__tab-panel__button").addClass("active");
        $(".c-homepage__tab-" + _currnetIndex).addClass("inPanel");
        $(".c-homepage__tab-" + _currnetIndex).removeClass("outPanel");
      });
    }
  }]);

  return SwitchTab;
}(MLP.apps.MLPModule);

$.mlpPlugin(SwitchTab, 'SwitchTab', false);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TopNav = function (_MLP$apps$MLPModule) {
  _inherits(TopNav, _MLP$apps$MLPModule);

  function TopNav() {
    _classCallCheck(this, TopNav);

    return _possibleConstructorReturn(this, (TopNav.__proto__ || Object.getPrototypeOf(TopNav)).apply(this, arguments));
  }

  _createClass(TopNav, [{
    key: 'init',


    // defaults() {
    //   this.defaults = {
    //     property: 'foo'
    //   };
    // }

    value: function init() {
      _get(TopNav.prototype.__proto__ || Object.getPrototypeOf(TopNav.prototype), 'init', this).call(this);
      this.el = {
        navItems: this.el.target.find('a')
      };
      this.event();
    }
  }, {
    key: 'event',
    value: function event() {
      var _this = this;
      this.el.navItems.on('click', function () {
        _this.el.navItems.removeClass('active');
        $(this).addClass('active');
      });
    }
  }]);

  return TopNav;
}(MLP.apps.MLPModule);

$.mlpPlugin(TopNav, 'TopNav', false);